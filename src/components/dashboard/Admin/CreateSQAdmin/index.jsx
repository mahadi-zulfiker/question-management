"use client";

import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

export default function CreateSQAdmin() {
    const [type, setType] = useState("‡¶ú‡ßç‡¶û‡¶æ‡¶®‡ßá‡¶∞‡¶Æ‡ßÇ‡¶≤‡¶ï");
    const [question, setQuestion] = useState("");
    const [answer, setAnswer] = useState("");
    const [classLevel, setClassLevel] = useState("");
    const [division, setDivision] = useState("");
    const [subjectName, setSubjectName] = useState("");
    const [subjectPart, setSubjectPart] = useState("");
    const [chapterName, setChapterName] = useState("");

    const questionTypes = ["‡¶ú‡ßç‡¶û‡¶æ‡¶®‡ßá‡¶∞‡¶Æ‡ßÇ‡¶≤‡¶ï", "‡¶Ö‡¶®‡ßÅ‡¶ß‡¶æ‡¶¨‡¶®‡¶Æ‡ßÇ‡¶≤‡¶ï", "‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó‡¶Æ‡ßÇ‡¶≤‡¶ï", "‡¶∏‡ßÉ‡¶∑‡ßç‡¶ü‡¶ø‡¶∂‡ßÄ‡¶≤"];

    const handleSubmit = async (e) => {
        e.preventDefault();

        const sqData = { type, question, answer, classLevel, division, subjectName, subjectPart, chapterName };

        const response = await fetch("/api/sq", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(sqData),
        });

        if (response.ok) {
            toast.success("‚úÖ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", { position: "top-right" });
            setType("‡¶ú‡ßç‡¶û‡¶æ‡¶®‡ßá‡¶∞‡¶Æ‡ßÇ‡¶≤‡¶ï");
            setQuestion("");
            setAnswer("");
            setClassLevel("");
            setDivision("");
            setSubjectName("");
            setSubjectPart("");
            setChapterName("");
        } else {
            toast.error("‚ùå ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", { position: "top-right" });
        }
    };

    return (
        <motion.div 
            initial={{ opacity: 0, y: -20 }} 
            animate={{ opacity: 1, y: 0 }} 
            transition={{ duration: 0.5 }}
            className="max-w-xl mx-auto p-6 bg-white rounded-lg shadow-lg border border-gray-200 mt-6"
        >
            <h2 className="text-2xl font-bold mb-4 text-center text-blue-600">üìù ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®</h2>
            <form onSubmit={handleSubmit}>
                <label className="block text-gray-700 font-medium mb-1">‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</label>
                <select 
                    className="w-full p-2 border rounded mb-4" 
                    value={classLevel} 
                    onChange={(e) => setClassLevel(e.target.value)} 
                    required
                >
                    <option value="">‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</option>
                    {[...Array(9)].map((_, i) => (
                        <option key={i + 4} value={i + 4}>‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ {i + 4}</option>
                    ))}
                </select>

                {classLevel >= 9 && (
                    <>
                        <label className="block text-gray-700 font-medium mb-1">‡¶°‡¶ø‡¶≠‡¶ø‡¶∂‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</label>
                        <select 
                            className="w-full p-2 border rounded mb-4" 
                            value={division} 
                            onChange={(e) => setDivision(e.target.value)}
                            required
                        >
                            <option value="">‡¶°‡¶ø‡¶≠‡¶ø‡¶∂‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</option>
                            {classLevel <= 10 ? (
                                <option value="SSC">SSC</option>
                            ) : (
                                <option value="HSC">HSC</option>
                            )}
                        </select>
                    </>
                )}

                <label className="block text-gray-700 font-medium mb-1">‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ</label>
                <input 
                    type="text" 
                    placeholder="‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ" 
                    className="w-full p-2 border rounded mb-4" 
                    value={subjectName} 
                    onChange={(e) => setSubjectName(e.target.value)} 
                    required
                />

                <label className="block text-gray-700 font-medium mb-1">‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá‡¶∞ ‡¶Ö‡¶Ç‡¶∂ (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)</label>
                <input 
                    type="text" 
                    placeholder="‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá‡¶∞ ‡¶Ö‡¶Ç‡¶∂" 
                    className="w-full p-2 border rounded mb-4" 
                    value={subjectPart} 
                    onChange={(e) => setSubjectPart(e.target.value)} 
                />

                <label className="block text-gray-700 font-medium mb-1">‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ</label>
                <input 
                    type="text" 
                    placeholder="‡¶Ö‡¶ß‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ" 
                    className="w-full p-2 border rounded mb-4" 
                    value={chapterName} 
                    onChange={(e) => setChapterName(e.target.value)} 
                    required
                />

                <label className="block text-gray-700 font-medium mb-1">‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®</label>
                <select 
                    className="w-full p-2 border rounded mb-4" 
                    value={type} 
                    onChange={(e) => setType(e.target.value)}
                >
                    {questionTypes.map((qType) => (
                        <option key={qType} value={qType}>{qType}</option>
                    ))}
                </select>

                <label className="block text-gray-700 font-medium mb-1">‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®</label>
                <input 
                    type="text" 
                    placeholder="üîπ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®" 
                    className="w-full p-2 border rounded mb-4" 
                    value={question} 
                    onChange={(e) => setQuestion(e.target.value)} 
                    required
                />

                <label className="block text-gray-700 font-medium mb-1">‡¶â‡¶§‡ßç‡¶§‡¶∞</label>
                <textarea 
                    placeholder="üîπ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®" 
                    className="w-full p-2 border rounded mb-4 h-24" 
                    value={answer} 
                    onChange={(e) => setAnswer(e.target.value)} 
                    required
                />

                <motion.button 
                    type="submit" 
                    className="w-full bg-blue-500 text-white py-2 mt-4 rounded hover:bg-blue-600 transition"
                    whileTap={{ scale: 0.95 }}
                >
                    ‚úÖ ‡¶∏‡¶æ‡¶¨‡¶Æ‡¶ø‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
                </motion.button>
            </form>
            <ToastContainer position="top-right" autoClose={3000} hideProgressBar />
        </motion.div>
    );
}